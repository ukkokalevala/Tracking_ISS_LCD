#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <SoftwareSerial.h>
#include <TinyGPS++.h>
#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include "secrets.h"  // Wi-Fi credentials

// LCD I2C setup
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Use 0x3F if 0x27 doesn't work

// GPS setup
TinyGPSPlus gps;
SoftwareSerial gpsSerial(D3, D4);  // RX (D3), TX (D4)

// N2YO API
String apiKey = "NH74CL-F9XL2D-EU42SJ-5CZB";
String satID = "25544";  // ISS ID

// Satellite data
float satLatitude = 0.0;
float satLongitude = 0.0;
float satAltitude = 0.0;
float satVelocity = 0.0;
float distance = 0.0;
String satTime = "";

// UI control
unsigned long lastFlip = 0;
int currentPage = 0;
const int totalPages = 3;

void setup() {
  Serial.begin(115200);
  gpsSerial.begin(9600);
  Wire.begin(D2, D1);
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("ISS Tracker Init");
  delay(2000);

  WiFi.begin(ssid, password);
  lcd.clear();
  lcd.print("Connecting WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  lcd.clear();
  lcd.print("WiFi Connected!");
  delay(1000);
}

void fetchISSData(float myLat, float myLon) {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClientSecure client;
    client.setInsecure();
    HTTPClient http;

    String url = "https://api.n2yo.com/rest/v1/satellite/positions/" + satID + "/" + String(myLat, 6) + "/" + String(myLon, 6) + "/0/2/&apiKey=" + apiKey;
    http.begin(client, url);
    int httpResponseCode = http.GET();

    if (httpResponseCode > 0) {
      String payload = http.getString();
      Serial.println(payload);
      StaticJsonDocument<2048> doc;
      DeserializationError error = deserializeJson(doc, payload);

      if (!error) {
        auto pos = doc["positions"][0];
        satLatitude = pos["satlatitude"];
        satLongitude = pos["satlongitude"];
        satAltitude = pos["sataltitude"];
        satVelocity = pos["satvelocity"];
        satVelocity = 27561.99;
        long timestamp = pos["timestamp"];
        timestamp += 2 * 3600;  // Adjust for UTC+2

        Serial.println("Velocity: " + String(satVelocity)); // Debug: print the velocity
        distance = calculateDistance(myLat, myLon, satLatitude, satLongitude);

        time_t raw = timestamp;
        struct tm * timeinfo = gmtime(&raw);
        char buffer[20];
        strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M", timeinfo);
        satTime = String(buffer);
      } else {
        Serial.println("JSON Parsing Failed");
      }
    } else {
      Serial.print("HTTP Error: ");
      Serial.println(httpResponseCode);
    }
    http.end();
  }
}

float calculateDistance(float lat1, float lon1, float lat2, float lon2) {
  const float R = 6371.0;
  float dLat = radians(lat2 - lat1);
  float dLon = radians(lon2 - lon1);
  float a = sin(dLat / 2) * sin(dLat / 2) +
            cos(radians(lat1)) * cos(radians(lat2)) *
            sin(dLon / 2) * sin(dLon / 2);
  float c = 2 * atan2(sqrt(a), sqrt(1 - a));
  return R * c;
}

void updateLCD() {
  lcd.clear();
  switch (currentPage) {
    case 0:
      lcd.setCursor(0, 0);
      lcd.print("Lat:");
      lcd.print(satLatitude, 2);
      lcd.setCursor(0, 1);
      lcd.print("Lon:");
      lcd.print(satLongitude, 2);
      break;
    case 1:
      lcd.setCursor(0, 0);
      lcd.print("Alt:");
      lcd.print(satAltitude, 1);
      lcd.print("km");
      lcd.setCursor(0, 1);
      lcd.print("Spd:");
      lcd.print(satVelocity, 0);
      lcd.print("km/h");
      break;
    case 2:
      lcd.setCursor(0, 0);
      lcd.print("Dist:");
      lcd.print(distance, 0);
      lcd.print("km");
      lcd.setCursor(0, 1);
      lcd.print(satTime);  // UTC
      break;
  }
}

void loop() {
  while (gpsSerial.available() > 0) {
    gps.encode(gpsSerial.read());

    if (gps.location.isUpdated()) {
      float myLat = gps.location.lat();
      float myLon = gps.location.lng();

      fetchISSData(myLat, myLon);
    }
  }

  if (millis() - lastFlip > 3000) {
    currentPage = (currentPage + 1) % totalPages;
    updateLCD();
    lastFlip = millis();
  }
}
